#+title: The SPNG Winch example

SPNG is a new signal processing for Wire-Cell.  Until it is released we must
build and use it in a developer environment based on the ~spng~ branch of
~wire-cell-toolkit~.

The ~spng.toml~ example provides a few ways to build the stack.

- Debian (bookworm or trixie) + Spack
- Debian (bookworm or trixie) + yet more Debian
- Alma (8 or 9) + Spack (work in progress)
  
* Quick start

This assumes [[https://github.com/astral-sh/uv/][uv]] to run/install winch (there are other ways).

** Initial low-commitment test

#+begin_example
$ uv run --with git+https://github.com/brettviren/winch.git winch --help
#+end_example

** Install

You can continue to ~uv run~ winch but to avoid the verbose command line, install winch as a "uv tool" 

#+begin_example
uv tool install git+https://github.com/brettviren/winch.git
#+end_example

** Configure

Get the =spng.toml= example file and set an env var to avoid having to remember to
provide the =-c/--config= option:
#+begin_example
$ wget https://raw.githubusercontent.com/brettviren/winch/refs/heads/master/example/spng.toml
$ export WINCH_CONFIG spng.toml
#+end_example

You can now see what image instance names can be built:

#+begin_example
$ winch list
debian:bookworm
debian-bookworm-minimal
debian-bookworm-minimal-spack-v1.0.0
debian-bookworm-minimal-spack-v1.0.0-wct_spack-1.0.0
debian-bookworm-minimal-spack-v1.0.0-wct_spack-1.0.0-wct-0.30.7
debian-bookworm-minimal-spack-v1.0.0-wct_spack-1.0.0-wct-0.30.7-spng-dev
...
#+end_example
Your output will differ as ~spng.toml~ is further developed

** Build

Example of building a full stack up to a specific instance:

#+begin_example
$ winch build -d <image-name-from-list>
#+end_example

* Using

** One-shot command running

Run a command in an ephemeral container:

#+begin_example
$ export SPNG_IMAGE=<image-name-from-list>  # just for abbreviation

$ podman run --rm --device nvidia.com/gpu=all -it $SPNG_IMAGE wire-cell --help
$ podman run --rm --device nvidia.com/gpu=all -it $SPNG_IMAGE nvidia-smi
$ podman run --rm --device nvidia.com/gpu=all -it $SPNG_IMAGE  # interactive shell
#+end_example

** Persistent user environment

Images ending in =-user= provide a final layer to help use the image as a base for
a persistent user volume.  Here is a general recipe 

#+begin_example
$ podman volume create MY-DATA-VOLUME
$ podman create --name MY-IMAGE-NAME --volume MY-DATA-VOLUME:/home/devuser --tz=local USER-IMAGE
$ podman start MY-IMAGE-NAME
$ podman exec -it MY-IMAGE-NAME <command-as-user>
$ podman exec -it -u root MY-IMAGE-NAME <command-as-root>
#+end_example

Replace capitalized strings with your own values given:

- =USER-IMAGE= :: The winch image ending in =-user=.
- =MY-DATA-VOLUME= :: The name of an image created to hold your interactive modifications to the base.
- =MY-IMAGE-NAME= :: The combined user and data images.

This assumes the user in the container is =devuser=.  If you work on a system with SELinux, using ~/home/devuser:Z~ may be required.

*** Worked example

#+begin_example
$ podman volume create bv-spng-data
bv-spng-data

$ podman create --name bv-spng-user --volume bv-spng-data:/home/devuser --tz=local localhost/debian-bookworm-minimal-spack-v1.0.1-wct_spack-1.0.0-wct-0.30.7-spng-dev-user
0bc4071dc0f770d4ad24be582c6418fb3ad3c189795425cd26902613fe691298

$ podman start bv-spng-user
bv-spng-user

$ podman exec -it bv-spng-user /usr/bin/fish
Welcome to fish, the friendly interactive shell
Type help for instructions on how to use fish
devuser@0bc4071dc0f7 ~> echo Hello world > greeting.txt
devuser@0bc4071dc0f7 ~> exit

$ podman exec -it bv-spng-user cat greeting.txt
Hello world
#+end_example

Note, currently there is no way to provide alternative values for =ARG= variables short of editing the =spng.toml= file.

** SSH into the container

The =-user= images use =openssh-server= as the placeholder that is run by =podman start <name>= in order to keep the container running.  You can make use of it to access the container via ~ssh~ instead of ~podman exec~ by first creating the container with the SSHd port mapped:

#+begin_example
$ podman create --name bv-spng-user --volume bv-spng-data:/home/devuser --tz=local -p 2222:22 localhost/debian-bookworm-minimal-spack-v1.0.1-wct_spack-1.0.0-wct-0.30.7-spng-dev-user

$ podman start bv-spng-user

$ podman exec -it bv-spng-user /usr/bin/fish
#+end_example

In that initial shell, create and fill the usual =~/.ssh/athorized_keys= file.  Then exit and

#+begin_example
$ ssh  -p 2222 devuser@localhost
#+end_example

Note, if you have problems, consider running this prior to the ~ssh~ command:

#+begin_example
$ podman logs -f bv-spng-user
#+end_example


* Exporting images

To export an image to OCI format file run something like:

#+begin_example
$ podman save --format oci-archive \
   -o debian12-spack101-wct0307-spngdev.tar \
   localhost/debian-bookworm-minimal-spack-v1.0.1-wct_spack-1.0.0-wct-0.30.7-spng-dev
#+end_example

This example save takes about six minutes to complete, the image reports as
42.7GB under ~podman images~ and the resulting tar file is 24GB.

* notes

Some reconnoitering to figure out what type of jobs to expose

#+begin_example
sudo apt-get install locales  # quell warnings from bash 
uv tool install snakemake     # for various WCT workflows
fish_add_path ~/.local/bin /winch/local/bin
set -x -U WIRECELL_PATH /winch/local/share/wirecell:/winch/toolkit/cfg
#+end_example

Currently, the SSH environment does not inherit the ~ENV~ settings that are active
when doing ~podman exec~.  The "user" layer could be improved to make some shell
init files.  For now, user must do the needful.

One example snakemake workflow:

#+begin_example
/winch/toolkit/test/scripts/spdir --config detector=pdsp --directory spdir all
#+end_example

To extract the files from the volume to the native host you can use ~scp~ or:

#+begin_example
podman cp 'bv-spng-user:/home/devuser/junk/spdir/' junk/
#+end_example

Or, you could back up and mount a native directory instead of or in addition to
the volume and write directly to that.

* Campaign 0

Some notes specific for the "campaign 0" image.

** Developer running

A script is provided to bring some symmetry between the different modes of
running.  Note, it adds the directory holding the script to ~WIRECELL_PATH~ and
also uses ~WIRECELL_PATH~ to resolve config, model and input files.  This is
custom behavior.

#+begin_example
$ ./spng/test/campaign0  # prints help

$ device=gpu tech=spng \
  ./spng/test/campaign0 \
  -t $tech
  -d $device  \
  -i tensor_frames_noise_1anode.npz \
  -o out/$tech/$device/junk-%s.npz \
  -m unet-l23-cosmic500-e50.ts \
  -c wct-framesource_1anode_dnnroi.jsonnet
#+end_example

** Podman image

The image is built with ~winch~ using the ~spng.toml~ example that it provides.

#+begin_example
$ winch list | grep campaign0
# shortcut for later commands
$ export IMAGE=debian-bookworm-minimal-spack-v1.0.1-wct_spack-1.0.0-wct-0.30.7-campaign0
$ winch build -d $IMAGE
#+end_example

The following issues must be handled to run ~campaign0~ inside the podman container:

- Mount a host directories for input or output not already in the container.
- Tell docker about GPU, if using .

#+begin_example
$  ls /nfs/data/1/bviren/newsp/toolkit/run
tensor_frames_noise_1anode.npz

$ podman run -it --rm \
  -v /nfs/data/1/bviren/newsp/toolkit/run:/data \
  debian-bookworm-minimal-spack-v1.0.1-wct_spack-1.0.0-wct-0.30.7-campaign0 \
    /winch/toolkit/spng/test/campaign0 \
     -t spng -o cpu \
     -i /data/tensor_frames_noise_1anode.npz \
     -o /data/out/spng/cpu/signals-%s.npz \
     -c wct-framesource_1anode_dnnroi.jsonnet \
     -m unet-l23-cosmic500-e50.ts

$ ls /nfs/data/1/bviren/newsp/toolkit/run/out/spng/cpu/
err  log  out  signals-u.npz  signals-v.npz  signals-w1.npz  signals-w2.npz
#+end_example
  
A few things to note:

- Mounts ~/nfs/data/1/bviren/newsp/toolkit/run~ to ~/data~.
  - It already holds the input file.
  - It will receive the output file(s).
- Must give full path to ~campaign0~ script.
- The directory ~/data~ is referenced for all input and output data paths.
- The config and DNNROI model are provided by the container and auto-located.
- Add podman argument ~--device nvidia.com/gpu=all~ so it will find GPUs.


Of course, you can use different volume mounts for output as input and you can
use different config and DNNROI model files.

** OCI image

This format is apparently best for CVMFS but I don't know what to do with it.

#+begin_example
$ podman save --format oci-archive \
    -o oci-wct-spng-0.tar \
    debian-bookworm-minimal-spack-v1.0.1-wct_spack-1.0.0-wct-0.30.7-campaign0 
#+end_example

This command takes 5m43s and produces a file of about 24 GB.

** Apptainer image

Apptainer apparently wants the default ~podman save~ format, which is docker's..

#+begin_example
$ podman save \
    debian-bookworm-minimal-spack-v1.0.1-wct_spack-1.0.0-wct-0.30.7-campaign0 
#+end_example
This command takes 4m33s and produces a file of about 41 GB.
Then, this image can be converted to apptainer format.

#+begin_example
$ apptainer build wct-spng-0.sif docker-archive:wct-spng-0.tar 
#+end_example
This command takes 16m2s and produces a file of about 11GB.

Example running ~campaign0~ in apptainer:

#+begin_example
$ apptainer run wct-spng-0.sif \
  /winch/toolkit/spng/test/campaign0 \
  -t spng -o gpu \
           -i /data/tensor_frames_noise_1anode.npz \
           -o /data/out/spng/gpu/signals-%s.npz \
           -c wct-framesource_1anode_dnnroi.jsonnet \
           -m unet-l23-cosmic500-e50.ts
#+end_example


** GitHub container registry

This requires a GitHub "personal access token (classic)".  See "developer
settings" at the bottom of your GitHub settings page to generate one.

#+begin_example
$ podman login ghcr.io
#+end_example

Tag the local image

#+begin_example
$ podman tag debian-bookworm-minimal-spack-v1.0.1-wct_spack-1.0.0-wct-0.30.7-campaign0 ghcr.io/brettviren/wct-spng-0:v1
#+end_example
Push:
#+begin_example
$ podman push ghcr.io/brettviren/wct-spng-0:v1
#+end_example
This command takes 17m and failed with 504 gateway timeout error, twice.  Repeating will repush blob ~7687cbf4ab82~ (31.3GiB).


To make the image generally available, visit "Packages" from your GitHub
profile, click on containers and adjust.

** Getting container images

- OCI and apptainer may be found here: https://www.phy.bnl.gov/~bviren/wire-cell/spng/

- For GHCR, see here: 

