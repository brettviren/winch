#+title: ðŸ§µ winch is an image node container harness ðŸ§µ

* What is *winch*

Said most generally, *winch* is a generator of text (strings or files) using a
hierarchical, parameterized data structure that the user provides in a simple
configuration file.

*winch* also provides special support to generate and build *podman* container images.

* How to use *winch*

This section describes how to install *winch* and run it using a provided example configuration.

** Installation

*winch* is a Python package and should obey recent Python packaging norms (make a
GitHub Issue if you find that it does not).  You may use your favorite
installation method and I recommend mine using [[https://github.com/astral-sh/uv][uv]]:

#+begin_example
$ uv tool install git+https://github.com/brettviren/winch
#+end_example

** Basic help

Run to print help:

#+begin_example
$ winch
#+end_example

You will need =~/.local/bin= in ~$PATH~ or you may run as: ~uvx winch~.

** Commands

You will next need a *winch* configuration file.  See section below for guidance.
Here we show commands using the provided [[https://github.com/brettviren/winch/tree/master/example/contrived.toml][~contrived.toml~]] example configuration.

List possible images:

#+begin_example
$ winch -c contrived.toml list -i all
#+end_example

Generate a *winch instance graph*:

#+begin_example
$ winch -c contrived.toml dot -t '{image}' > contrived.dot
$ dot -Tsvg -o contrived.svg contrived.dot
#+end_example

#+attr_html: :width 90%
#+attr_latex: :width 90%
[[./example/contrived.svg]]

Build one or all images:

#+begin_example
$ winch -c winch.toml build -i debian-bookworm-edit
$ winch -c winch.toml build -i all
#+end_example

* Configure *winch*

*winch* reads a brief configuration file written in the simple [[https://toml.io/][TOML]] format.  Each
top level TOML "table" (aka "section" or "stanza" or "object") provides a set of
parameters that represent one *kind* of container image layer.

Parameters are generally considered string type and may include Python ~{format}~
markup.  Some special non-string types are described below.  The user is free to
invent parameters as needed while *winch* will interpret these parameters
specially:

- ~image~ :: the name of the image layer such as used in a ~FROM~ line of a ~Containerfile~.
- ~containerfile~ :: the content of a ~Containerfile~.
- ~parent_kind~ :: optional, one or a *list* of other TOML tables to provide a possible parent image layer.

Note, the user may tell *winch* to use different parameters that serve the role of
~image~ and ~containerfile~ via command line arguments.

If a ~parent_kind~ attribute exists then the string values in a table's parameters
may refer to these parameters which *winch* provides implicitly:

- ~parent~ :: a ~dict~-like object holding the parameters of a parent *instance*.

Some example configuration files are in the [[https://github.com/brettviren/winch/tree/master/example][~example/~]] directory.  To make your
own *winch* configuration you will need to know how *winch* works as described next.

* How *winch* works

The *kind* of container image layer described by its TOML table may be ambiguous
in two ways:

- Each *kind* may have a number of parameters that are of list-of-string type.
  The list provides all possible *variant* values for the parameter.  For example
  a ~debian~ kind of image may have a ~release~ parameter with the value
  ~["bookworm","trixie"]~ and thus represent two possible Debian release code
  names.

- Each *kind* may have zero or more *parent* kinds.  Each parent represents a kind
  of image upon which the current kind of image is built.  For example a
  ~debian_minimal~ kind of image may install a set of additional packages on top
  of a ~debian~ kind of image.  The table for a kind may reference parameters of a
  parent kind by the special ~dict~-like parameter, ~parent~.

*winch* then generates an *instance* from each *kind* table by selecting one element
from each *variant* parameter value to use as the that parameter's value and by
selecting one *parent instance* from one of possibly multiple *parent kinds*.  After
the selection, the instance is *self formatted*.  This self-formatting uses the
set of instance parameters to format any string parameter values.

The user will need to understand this in order to make powerful configuration
files.  Below we give an example that shows these mechanisms and then describe 
how *winch* enacts them to generate container layer *instances* from the *kinds*.

** A contrived example

To get started, consider the  [[https://github.com/brettviren/winch/tree/master/example/contrived.toml][~contrived.toml~]] example:

#+include: example/contrived.toml src toml

Things to notice:

- The ~release~ parameter in the ~debian~ kind (and the ~alma~ kind) is a
  list-of-string and thus provides possible *variants* for a final ~release~ value.
  That is, there are two possible releases for which *winch* may generate images.
  In general, *winch* will form an *outer product* of all variant parameters in
  generating instances.

- The ~emacs~ kind has both ~debian~ and ~alma~ as possible parent kinds.  *winch* will
  generate four image layers to install the ~emacs~ package on all possible four
  parents (two OSes x two releases).

- The ~devel~ kind likewise has the same parent kinds as ~emacs~.  In total we then
  get ~2 x 2 x 2 x 2 = 8~ "leaf" images.


We can list all these image names (omitting the "node" hash that is described later):

#+begin_example
$ winch -c example/contrived.toml list -i all -t '{image}'
debian:bookworm
debian:trixie
debian-bookworm-edit
debian-trixie-edit
debian:bookworm-devel
debian:trixie-devel
almalinux:8
almalinux:9
alma-8-edit
alma-9-edit
almalinux:8-devel
almalinux:9-devel
#+end_example

** Instance generation algorithm

In order for the user to understand how *winch* self-formats the parameters it is
important to understand how *winch* generates instances from kinds.

The ~parent_kind~ parameter connects kinds into a parent-to-child directed graph
that *winch* calls the K-graph.  This graph allows for splits where ~parent_kind~ is
a list-of-string and it allows for joins where different kinds name the same
parent kind.  *winch* generates instances from the K-graph which retain parentage
information in the form of the *winch* I-graph.  Generation follows this graph
traversal algorithm:

1. Find all paths in the K-graph and then for each path:

2. Form the cross product over the *variant* parameters to generate the set of
   instances of the kind.

3. If the kind has a parent then:
   1. Get the previously set of instances generated from the parent kind.
   2. Form the outer product of sets of kind and parent-kind instances.
   3. Attach the parent instance to the child as a ~parent~ attribute.
   4. Form an I-graph edge from parent instance to child instance.

4. Self-format the instance parameters.

5. Temporarily store and associate the generated instances with the kind in the path.

6. Continue to next kind in the path.

7. Continue to the next path.


* winch for Wire-Cell

We initially developed *winch* to help build and test the [[https://github.com/wirecell/wire-cell-toolkit][Wire-Cell Toolkit]].  We provide the [[file:example/wct.toml][~wct.toml~]] configuration file as a starting point for building a large suite of images that test WCT on different platforms.  Here lists the current images (subject to change in the future):

#+begin_example
$ winch -c example/wct.toml list -i all -t '{image}'
debian:bookworm
debian:trixie
debian-bookworm-minimal
debian-trixie-minimal
debian-bookworm-minimal-spack
debian-trixie-minimal-spack
debian-bookworm-minimal-spack-wct-master
debian-trixie-minimal-spack-wct-master
debian-bookworm-minimal-spack-wct-0.28.0
debian-trixie-minimal-spack-wct-0.28.0
debian-bookworm-minimal-spack-wct-master-dev-apply-pointcloud
debian-trixie-minimal-spack-wct-master-dev-apply-pointcloud
debian-bookworm-minimal-spack-wct-0.28.0-dev-apply-pointcloud
debian-trixie-minimal-spack-wct-0.28.0-dev-apply-pointcloud
debian-bookworm-minimal-spack-wct-master-dev-apply-pointcloud-wctdev
debian-trixie-minimal-spack-wct-master-dev-apply-pointcloud-wctdev
debian-bookworm-minimal-spack-wct-0.28.0-dev-apply-pointcloud-wctdev
debian-trixie-minimal-spack-wct-0.28.0-dev-apply-pointcloud-wctdev
almalinux:9
alma-9-minimal
alma-9-minimal-spack
alma-9-minimal-spack-wct-master
alma-9-minimal-spack-wct-0.28.0
alma-9-minimal-spack-wct-master-dev-apply-pointcloud
alma-9-minimal-spack-wct-0.28.0-dev-apply-pointcloud
alma-9-minimal-spack-wct-master-dev-apply-pointcloud-wctdev
alma-9-minimal-spack-wct-0.28.0-dev-apply-pointcloud-wctdev
#+end_example




* winch for other things

*winch* is general in that it can generate ~podman~ images for a variety of purposes.

*winch* is even more general in that it can generate strings and files for any
purposes where the hierarchical graph traversal is useful.  The ~winch render~
command provides this general application.  This command is essentially the same
as ~winch build~ but it omits the call to ~podman~ and requires the user to specify
content template string (~-t~) or content template attribute (~-T~) and an output
path template.  Here we apply it to generate ~Containerfile~ files reusing the
contrived example from above.

#+begin_example
$ winch -c contrived.toml render -T containerfile -o 'winch-render/{image}/Containerfile'
WARNING no template attribute containerfile in node f049130fb5191b1ee8eb438c7ccce767c8ffdbcb, skipping (cli.py:render)
WARNING no template attribute containerfile in node f5f2530898b047a2d8085fd0678037e7addbbf77, skipping (cli.py:render)
WARNING no template attribute containerfile in node 8047456e50255be118a082460ca60b887a19a2e7, skipping (cli.py:render)
WARNING no template attribute containerfile in node 521a5a67e9b4229f2cf30c0c3fd89bfab2667791, skipping (cli.py:render)

$ tree winch-render/
winch-render/
â”œâ”€â”€ alma-8-edit
â”‚Â Â  â””â”€â”€ Containerfile
â”œâ”€â”€ alma-9-edit
â”‚Â Â  â””â”€â”€ Containerfile
â”œâ”€â”€ almalinux:8-devel
â”‚Â Â  â””â”€â”€ Containerfile
â”œâ”€â”€ almalinux:9-devel
â”‚Â Â  â””â”€â”€ Containerfile
â”œâ”€â”€ debian:bookworm-devel
â”‚Â Â  â””â”€â”€ Containerfile
â”œâ”€â”€ debian-bookworm-edit
â”‚Â Â  â””â”€â”€ Containerfile
â”œâ”€â”€ debian:trixie-devel
â”‚Â Â  â””â”€â”€ Containerfile
â””â”€â”€ debian-trixie-edit
    â””â”€â”€ Containerfile

9 directories, 8 files
#+end_example

