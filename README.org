#+title: ðŸ§µ winch is an image node container harness ðŸ§µ

* What is *winch*

Said most generally, *winch* is a generator of text (strings or files) using a
hierarchical, parameterized data structure that the user provides in a simple
configuration file.

*winch* also provides special support to generate [[https://podman.io/][podman]] ~Containerfile~ files and build them into *podman* images.

* How to use *winch*

This section describes how to install *winch* and run it using a provided example configuration.

** Requirements

*winch* requires Python 3 with the Click and Neworkx packages for the most basic usage.  In addition the ~podman~ command is required to build container images from a *winch* configuration.

** Installation

*winch* is a Python package that follows "modern" Python packaging norms (make a
GitHub Issue if it fails to do so).  You may use your favorite
installation method and I recommend mine using [[https://github.com/astral-sh/uv][uv]]:

#+begin_example
$ uv tool install git+https://github.com/brettviren/winch
#+end_example

Add option ~-U~ to update.  See also section [[Shell environment]].

** Command line help

*winch* provides command line help:

#+begin_example
$ winch
$ winch <command> --help
#+end_example

If you installed as a ~uv tool~ add =~/.local/bin= to your ~$PATH~ or prefix ~uvx~ as in: ~uvx winch~.

** Commands

Most *winch* commands require a *winch* configuration file.  Here we will give
examples using [[https://github.com/brettviren/winch/tree/master/example/contrived.toml][~contrived.toml~]] and set ~WINCH_CONFIG~ to keep the examples
simple.  See section [[Shell environment]] for information about environment
variables and section [[Configuration]] for how to craft your own *winch*
configuration file.

First, we may list all possible instances:

#+begin_example
$ export WINCH_CONFIG=/path/to/winch/example/contrived.toml
$ winch list
debian:bookworm
debian:trixie
debian-bookworm-minimal
debian-trixie-minimal
...
#+end_example

As described more below, the image layer instances form a directed graph.  *winch*
can render this graph to a GraphViz dot file:

#+begin_example
$ winch dot -t '{image}' > contrived.dot
$ dot -Tsvg -o contrived.svg contrived.dot
#+end_example

The ~-t/--template~ option sets what label to display in the graph nodes.  The
~image~ label is domain-specific but in the example it represents the name given
to a ~FROM~ command in a ~Containerfile~.  The generated graph looks like:

#+attr_html: :width 90%
#+attr_latex: :width 90%
[[./example/contrived.svg]]

Why it looks like this is described more in section [[How *winch* works]].

You may also apply the configuration to build *podman* container images:

#+begin_example
$ winch -c winch.toml build -i debian-bookworm-edit
$ winch -c winch.toml build -i all
#+end_example

Here, we select a specific instance by the default instance attribute (/ie/ ~image~)
with ~-i debian-bookworm-edit~.

The ~-d/--deps~ is an important alternative to ~-i/--instance~ when there are many
possible image layers.  It and other options are describe in the section [[Usage
tips]].



* Configuration

*winch* reads a configuration file written in the simple [[https://toml.io/][TOML]] format.  Each
top level TOML "table" (aka "section" or "stanza" or "object") provides a set of
parameters that represent one *kind* of container image layer.

Parameters are generally considered string type and may include Python ~{format}~
markup.  Some special non-string *variant* types are described below.  The user is free to
invent parameters as needed while *winch* will interpret a few parameters
specially:

- ~image~ :: the name of the image layer such as used in a ~FROM~ line of a ~Containerfile~.
- ~containerfile~ :: the content of a ~Containerfile~.
- ~parent_kind~ :: zero (omitted), one or a *list* of other TOML tables to provide a possible parent image layer.
- ~files~ :: a (sub) table (aka ~dict~) which maps file paths relative to the directory holding ~Containerfile~ to their file content.

Notes

- The user may tell ~winch build~ to use different attribute names that serve the
  role of ~image~ and ~containerfile~.

- The ~files~ attribute is intended to provide content of files to add to a
  container image via the ~Containerfile~ directive ~COPY~.

If a ~parent_kind~ attribute exists then the string values in a table's parameters
may refer to these parameters which *winch* provides implicitly:

- ~parent~ :: a ~dict~-like object holding the parameters of a parent *instance*.

Some example configuration files are in the [[https://github.com/brettviren/winch/tree/master/example][~example/~]] directory.  To make your
own *winch* configuration you will need to know how *winch* works as described next.

* How *winch* works

The *kind* of container image layer described by its TOML table may be ambiguous
in two ways:

- Each *kind* may have a number of parameters that are of list-of-string type.
  The list provides all possible *variant* values for the parameter.  For example
  a ~debian~ kind of image may have a ~release~ parameter with the value
  ~["bookworm","trixie"]~ and thus represent two possible Debian release code
  names.

- Each *kind* may have zero or more *parent* kinds.  Each parent represents a kind
  of image upon which the current kind of image is built.  For example a
  ~debian_minimal~ kind of image may install a set of additional packages on top
  of a ~debian~ kind of image.  The table for a kind may reference parameters of a
  parent kind by the special ~dict~-like parameter, ~parent~.

*winch* then generates an *instance* from each *kind* table by selecting one element
from each *variant* parameter value to use as the that parameter's value and by
selecting one *parent instance* from one of possibly multiple *parent kinds*.  After
the selection, the instance is *self formatted*.  This self-formatting uses the
set of instance parameters to format any string parameter values.

The user will need to understand this in order to make powerful configuration
files.  Below we give an example that shows these mechanisms and then describe 
how *winch* enacts them to generate container layer *instances* from the *kinds*.

** A contrived example

To get started, consider the  [[https://github.com/brettviren/winch/tree/master/example/contrived.toml][~contrived.toml~]] example:

#+include: example/contrived.toml src toml

Things to notice:

- The ~release~ parameter in the ~debian~ kind (and the ~alma~ kind) is a
  list-of-string and thus provides possible *variants* for a final ~release~ value.
  That is, there are two possible releases for which *winch* may generate images.
  In general, *winch* will form an *outer product* of all variant parameters in
  generating instances.

- The ~emacs~ kind has both ~debian~ and ~alma~ as possible parent kinds.  *winch* will
  generate four image layers to install the ~emacs~ package on all possible four
  parents (two OSes x two releases).

- The ~devel~ kind likewise has the same parent kinds as ~emacs~.  In total we then
  get ~2 x 2 x 2 x 2 = 8~ "leaf" images.


We can list all these image names (omitting the "node" hash that is described later):

#+begin_example
$ winch -c example/contrived.toml list -i all -t '{image}'
debian:bookworm
debian:trixie
debian-bookworm-edit
debian-trixie-edit
debian:bookworm-devel
debian:trixie-devel
almalinux:8
almalinux:9
alma-8-edit
alma-9-edit
almalinux:8-devel
almalinux:9-devel
#+end_example

** Instance generation algorithm

In order for the user to understand how *winch* self-formats the parameters it is
important to understand how *winch* generates instances from kinds.

The ~parent_kind~ parameter connects kinds into a parent-to-child directed graph
that *winch* calls the K-graph.  This graph allows for splits where ~parent_kind~ is
a list-of-string and it allows for joins where different kinds name the same
parent kind.  *winch* generates instances from the K-graph which retain parentage
information in the form of the *winch* I-graph.  Generation follows this graph
traversal algorithm:

1. Find all paths in the K-graph and then for each path:

2. Form the cross product over the *variant* parameters to generate the set of
   instances of the kind.

3. If the kind has a parent then:
   1. Get the previously set of instances generated from the parent kind.
   2. Form the outer product of sets of kind and parent-kind instances.
   3. Attach the parent instance to the child as a ~parent~ attribute.
   4. Form an I-graph edge from parent instance to child instance.

4. Self-format the instance parameters.

5. Temporarily store and associate the generated instances with the kind in the path.

6. Continue to next kind in the path.

7. Continue to the next path.


* Usage tips


** Instance selection

Many of the ~winch~ commands take options to select a subset of instances from the
I-graph.

#+begin_example
-k, --kind TEXT      Limit to I-nodes made from K-node regardless of path
-d, --deps TEXT      Limit to I-nodes on which the given inode depends.
-i, --instances TEXT    Limit to specific I-nodes.
#+end_example

The ~-d/--deps~ and ~-i/--instances~ take options like:

- ~all~ :: a literal string that matches all instances
- ~<key>=<value>~ :: all instances that have a matching attribute
- ~<value>~ :: all instances that have a matching default "instance attribute" (~image~)
- ~<digest>~ :: a 40 character hexadecimal SHA1 digest.

The ~<digest>~ is a hash over the instance data and used internally to identify nodes in the I-graph.  The user may display digests and image names (and other attributes) with:

#+begin_example
$ uv run winch list -t '{node} {image}'
1ac89aa1b74b245307180e4613430a0d529e8d91 debian:bookworm
a067aa9c38dfb566bbddb6d6d2056641bc6fbae9 debian:trixie
...
#+end_example


** Maybe rebuilding

By default, *winch* will not ask *podman* to rebuild an image that already exists
even if the ~Containerfile~ file may have changed.  This avoids the time needed
for *podman* to examine the existing image.  Using a ~-d/--deps~ selection example,
*winch* will notify the user when this occurs with lines like:

#+begin_example
$ uv run winch -c example/contrived.toml build -d image=debian-bookworm-edit
not rebuilding existing image: debian:bookworm
not rebuilding existing image: debian-bookworm-edit
#+end_example

You can let *podman* consider rebuilding with ~-r/--rebuild~ value of ~none~, ~all~,
~deps~ or ~last~.

#+begin_example
$ uv run winch -c example/contrived.toml build -d image=debian-bookworm-edit -r last
not rebuilding existing image: debian:bookworm
STEP 1/3: FROM debian:bookworm
STEP 2/3: RUN apt-get update && apt-get upgrade
...
COMMIT debian-bookworm-edit
--> a6351fa2dad
Successfully tagged localhost/debian-bookworm-edit:latest
a6351fa2dade519407e2b6b394245d59b42abb703c56d633f29c5b35fcb5bb45
#+end_example

Repeating shows *podman* taking time to decide not to actually rebuild:

#+begin_example
$ uv run winch -c example/contrived.toml build -d image=debian-bookworm-edit -r last
not rebuilding existing image: debian:bookworm
STEP 1/3: FROM debian:bookworm
STEP 2/3: RUN apt-get update && apt-get upgrade
--> Using cache 3b57ff160cf4aec691ea432a6ad3a58a93d5c014072c54cfc1e19f187ca8f4bf
--> 3b57ff160cf
STEP 3/3: RUN apt-get install -y emacs
--> Using cache a6351fa2dade519407e2b6b394245d59b42abb703c56d633f29c5b35fcb5bb45
COMMIT debian-bookworm-edit
--> a6351fa2dad
Successfully tagged localhost/debian-bookworm-edit:latest
a6351fa2dade519407e2b6b394245d59b42abb703c56d633f29c5b35fcb5bb45
#+end_example

** Force rebuilding

When state resides outside the ~Containerfile~ then *podman* can not detect the need to change.  This is commonly experienced when a layer builds the ~HEAD~ of some changing ~git~ branch.  To force a rebuild, *winch* provides a ~-f/--force~ command line option that accepts the same arguments as ~-r/--rebuild~.

#+begin_example
$ uv run winch -c example/contrived.toml build -d image=debian-bookworm-edit -f last
not rebuilding existing image: debian:bookworm
force-removing existing image: debian-bookworm-edit
Untagged: localhost/debian-bookworm-edit:latest
Deleted: a6351fa2dade519407e2b6b394245d59b42abb703c56d633f29c5b35fcb5bb45
Deleted: 3b57ff160cf4aec691ea432a6ad3a58a93d5c014072c54cfc1e19f187ca8f4bf
STEP 1/3: FROM debian:bookworm
STEP 2/3: RUN apt-get update && apt-get upgrade
...
COMMIT debian-bookworm-edit
--> 2907d0e7a0d
Successfully tagged localhost/debian-bookworm-edit:latest
2907d0e7a0d90a63bd011e064d28bb923e1581cfea9581251fa6ee46c202e2f9
#+end_example

** Direct use of *podman*

Once produced by *winch*, the images are nothing special and the user may use them directly via *podman* as desired.

#+begin_example
$ podman run -it debian-bookworm-edit 
root@68341f6f17d8:/# which emacs
/usr/bin/emacs
#+end_example

** Shell environment

*winch* itself does not rely on any particular environment settings however it
supports setting command line option defaults using environment variables.  Each
option has a variable with prefix ~WINCH_~ and postfix formed by the long option
name translated to upper-case.  If you find yourself making many calls to ~winch~
the most useful setting is:

- ~WINCH_CONFIG~ :: set default for ~winch -c/--config=<file>~

Some variables that control *podman* are useful to set particularly if your ~/tmp~
or ~$HOME~ file systems are small and/or slow and your host provides better ones.

- ~TMPDIR~ :: set to some large/fast directory besides the default ~/tmp~.
- ~CONTAINERS_STORAGE_CONF~ :: set to the path of a custom ~storage.conf~ configuration file so that *podman* locates container image files on some large/fast directory besides the default =~/.local/share/containers/storage/~.

The content of the ~CONTAINERS_STORAGE_CONF~ file should look something like:

#+begin_example
[storage]
driver = "overlay"
graphroot = "/path/to/containers/storage"
rootless_storage_path = "/path/to/containers/storage"
#+end_example


** Configuration guidance

When using *winch* for building *podman* images it is important that each instance
has a unique ~image~ attribute value even with multiple parent kinds and/or
variants are employed.  A simple way to assure that is with the pattern of
taking on a unique label to the parent's ~image~.  Eg:

#+begin_src toml
  [some_kind]
  parent_kind = ["parent1", "parent2"]
  variant = ["value1", "value2"]
  image = '{parent[image]}-{variant}'
#+end_src

If the *kind* has no variant parameters then one may extend the parent ~image~ with a literal value or the special parameter ~'{kind}'~ can be used which takes the value of the table name.

#+begin_src toml
  [some_kind]
  parent_kind = ["parent1", "parent2"]
  image = '{parent[image]}-{kind}'
#+end_src


* Going further

Here we describe other ways to use *winch*.

** winch for Wire-Cell

We initially developed *winch* to help build and test the [[https://github.com/wirecell/wire-cell-toolkit][Wire-Cell Toolkit]].  We provide the [[file:example/wct.toml][~wct.toml~]] configuration file as a starting point for building a large suite of images that test WCT on different platforms.  Here lists the current images (subject to change in the future):

#+begin_example
$ winch -c example/wct.toml list -i all -t '{image}'
debian:bookworm
debian:trixie
debian-bookworm-minimal
debian-trixie-minimal
debian-bookworm-minimal-spack
debian-trixie-minimal-spack
debian-bookworm-minimal-spack-wct-master
debian-trixie-minimal-spack-wct-master
debian-bookworm-minimal-spack-wct-0.28.0
debian-trixie-minimal-spack-wct-0.28.0
debian-bookworm-minimal-spack-wct-master-dev-apply-pointcloud
debian-trixie-minimal-spack-wct-master-dev-apply-pointcloud
debian-bookworm-minimal-spack-wct-0.28.0-dev-apply-pointcloud
debian-trixie-minimal-spack-wct-0.28.0-dev-apply-pointcloud
debian-bookworm-minimal-spack-wct-master-dev-apply-pointcloud-wctdev
debian-trixie-minimal-spack-wct-master-dev-apply-pointcloud-wctdev
debian-bookworm-minimal-spack-wct-0.28.0-dev-apply-pointcloud-wctdev
debian-trixie-minimal-spack-wct-0.28.0-dev-apply-pointcloud-wctdev
almalinux:9
alma-9-minimal
alma-9-minimal-spack
alma-9-minimal-spack-wct-master
alma-9-minimal-spack-wct-0.28.0
alma-9-minimal-spack-wct-master-dev-apply-pointcloud
alma-9-minimal-spack-wct-0.28.0-dev-apply-pointcloud
alma-9-minimal-spack-wct-master-dev-apply-pointcloud-wctdev
alma-9-minimal-spack-wct-0.28.0-dev-apply-pointcloud-wctdev
#+end_example




** winch for other things

*winch* is general in that it can generate *podman* images for a variety of purposes.

*winch* is even more general in that it can generate strings and files for any
purposes where the hierarchical graph traversal is useful.  The ~winch render~
command provides this general application.  This command is essentially the same
as ~winch build~ but it omits the call to ~podman~ and requires the user to specify
content template string (~-t~) or content template attribute (~-T~) and an output
path template.  Here we apply it to generate ~Containerfile~ files reusing the
contrived example from above.

#+begin_example
$ winch -c contrived.toml render -T containerfile -o 'winch-render/{image}/Containerfile'
WARNING no template attribute containerfile in node f049130fb5191b1ee8eb438c7ccce767c8ffdbcb, skipping (cli.py:render)
WARNING no template attribute containerfile in node f5f2530898b047a2d8085fd0678037e7addbbf77, skipping (cli.py:render)
WARNING no template attribute containerfile in node 8047456e50255be118a082460ca60b887a19a2e7, skipping (cli.py:render)
WARNING no template attribute containerfile in node 521a5a67e9b4229f2cf30c0c3fd89bfab2667791, skipping (cli.py:render)

$ tree winch-render/
winch-render/
â”œâ”€â”€ alma-8-edit
â”‚Â Â  â””â”€â”€ Containerfile
â”œâ”€â”€ alma-9-edit
â”‚Â Â  â””â”€â”€ Containerfile
â”œâ”€â”€ almalinux:8-devel
â”‚Â Â  â””â”€â”€ Containerfile
â”œâ”€â”€ almalinux:9-devel
â”‚Â Â  â””â”€â”€ Containerfile
â”œâ”€â”€ debian:bookworm-devel
â”‚Â Â  â””â”€â”€ Containerfile
â”œâ”€â”€ debian-bookworm-edit
â”‚Â Â  â””â”€â”€ Containerfile
â”œâ”€â”€ debian:trixie-devel
â”‚Â Â  â””â”€â”€ Containerfile
â””â”€â”€ debian-trixie-edit
    â””â”€â”€ Containerfile

9 directories, 8 files
#+end_example




