# A winch config in support of the BNL/DUNE prompt-signal-processing SPNG work.

[debian]
#release = ['bookworm','trixie']
release = ['bookworm', 'trixie']
image = '{kind}:{release}'
label = '{kind} {release}'

[alma]
release = ["9"]
image = 'almalinux:{release}'
label = '{kind} {release}'

# CAVEAT: this is just here to remind me to flesh out. It will need some care to
# get the additional packages installed comensurate with debian_minimal.
[alma_minimal]
# Each image class has zero or more parents kinds.
parent_kind = "alma"
image = '{parent_kind}-{parent[release]}-minimal'
label = '{parent[label]} minimal'
# but will be given a single "parent" which is the data structure from the
# single instance upon which a generated instance is built.
containerfile = """
FROM {parent[image]}
RUN dnf update -y && dnf install -y "@Development Tools" \
    ca-certificates gcc-gfortran git gnupg2 clang \
    autoconf unzip zip man-db \
    emacs wget \
    python3 python3-setuptools python3-pip python3-devel \
    zlib-devel && dnf clean -y all
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && mv /root/.local/bin/uv* /usr/local/bin/
"""


# A Debian base for two subsequent layer branches.  One providing WCT
# dependencies with Spack and the other with more Debian + uv.
[debian_minimal]
parent_kind = "debian"
image = '{parent_kind}-{parent[release]}-minimal'
label = '{parent[label]} minimal'
# The template will be formated with params of this node and the parent.
containerfile = """
FROM {parent[image]}
RUN apt-get update \
    && \
    apt-get install -y \
      build-essential ca-certificates coreutils curl gfortran git gpg clang autoconf \
      lsb-release unzip zip direnv man-db emacs wget \
      python-is-python3 python3 python3-setuptools python3-venv python3-click python3-yaml \
      locales zlib1g-dev \
    && \
    apt-get clean
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && mv /root/.local/bin/uv* /usr/local/bin/
"""


# Build image with WCT/SPNG dependencies provided by Debian and uv
#
# This is currently probably impossible.
#
# Debian spdlog+fmt uses fmt::v10 namespace.  Torch brings in a header only
# fmt::v11.  There is then a fight between getting pytorch to properly #include
# the v10 version from Debian and not the v11 from torch.
#
# There is another problem that building test expecutables seem to not get
# spdlog+fmt but just spdlog.
#
# What a mess.
[debian_wctdeps]
parent_kind = "debian_minimal"
image = '{parent[image]}-wctdeps'
label = '{parent[label]} WCT deps'
containerfile = """
FROM {parent[image]}
RUN sed -e 's/Components: main/Components: main contrib non-free non-free-firmware/g' -i /etc/apt/sources.list.d/debian.sources 
RUN apt-get update \
    && \
    apt-get install -y \
      libboost-all-dev libjsonnet-dev jsonnet libeigen3-dev libhdf5-dev libtbb-dev libfftw3-dev \
      libspdlog-dev libfmt-dev \
      libcuda1 python3-numpy jq graphviz libjsoncpp-dev \
    && \
    apt-get clean

# fixme: this is already in debian_minimal, remove before next full rebuild
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && mv /root/.local/bin/uv* /usr/local/bin/
RUN uv pip install --system --break-system-packages torch --index-url https://download.pytorch.org/whl/cu126
# This requires 'podman run --device nvidia.com/gpu=all ...'
# RUN python -c 'import torch; print(torch.cuda.is_available(), torch.cuda.device_count())'
RUN python -c 'import torch; print(torch.__path__);'
"""
 

## Build WCT dev on debian+uv.  This duplicates a lot on spack+uv and common
## parts could be factored.
[spng_debdev]
parent_kind = "debian_wctdeps"
image = '{parent[image]}-spng'
label = '{parent[label]} spng'
package = "wire-cell-toolkit"

containerfile = """
FROM {parent[image]}

# We will install right in to the system!  hard fscking core.
ENV PREFIX /usr
ENV WIRECELL_PATH /usr/local/share/wire-cell/data:/winch/toolkit/cfg
ENV PATH /winch/toolkit/test/bats/bin:/bin:/usr/bin:/usr/local/bin:/root/.local/bin
ENV BATS_LIB_PATH /winch/toolkit/test

# wire-cell-data
RUN git clone --single-branch https://github.com/WireCell/wire-cell-data.git /usr/share/wirecell/data

# wire-cell-python
RUN uv pip install --system --break-system-packages git+https://github.com/wirecell/wire-cell-python
RUN wcpy --help

# wire-cell-toolkit
RUN git clone --branch spng --single-branch https://github.com/WireCell/wire-cell-toolkit.git /winch/toolkit
WORKDIR /winch/toolkit

## Store Torch base install directory.  This has the Python version encoded so
## we can not easily hard-wire it as an ENV.
RUN python -c 'import torch; print(torch.__path__[0]);' > /tmp/torch-basedir

# Caveat, no go-jsonnet in Debian.... --with-jsonnet-libs=gojsonnet
RUN ./wcb configure --prefix=$PREFIX \
    --boost-mt --boost-libs=$PREFIX/lib --boost-include=$PREFIX/include \
    --with-jsoncpp=$PREFIX --with-jsoncpp-include=$PREFIX/include/jsoncpp \
    --with-jsonnet=$PREFIX \
    --with-eigen-include=$PREFIX/include/eigen3 \
    --with-libtorch-lib=$(cat /tmp/torch-basedir)/lib \
    --with-libtorch-include=$(cat /tmp/torch-basedir)/include,$(cat /tmp/torch-basedir)/include/torch/csrc/api/include \
    --with-root=no --with-zio=no --with-zmq=no --with-czmq=no --with-zyre=no \
    || cat /winch/toolkit/build/config.log

RUN ./wcb 
RUN ./wcb install

# These executables are not typically for end users but may be useful for
# developer container. We move them out of build/ so we can purge all of build
# conserve storage space.
RUN cp build/*/check_* /usr/bin
RUN cp build/*/wcdoctest-* /usr/bin

RUN ./wcb distclean

# clear any parent
ENTRYPOINT []
# default command
CMD ["/bin/bash"]
"""




# Build a base Spack on top of either Debian or Alma.
[spack_base]
parent_kind = ["debian_minimal", "alma_minimal"]
# parent_kind = "debian_minimal"
image = '{parent[image]}-spack-{version}'
label = '{parent[label]} spack {version}'
version = "v1.0.1"
containerfile = """
FROM {parent[image]}
RUN git clone --branch {version} --depth=2 https://github.com/spack/spack.git
RUN /spack/bin/spack compiler find
"""


# Build WCT dependencies on top of spack. 
[wct_spack]
parent_kind = "spack_base"
image = '{parent[image]}-wct_spack-{version}'
label = '{parent[label]} WCT Spack {version}'
version = "1.0.0"
containerfile = """
FROM {parent[image]}
RUN git clone --branch {version} https://github.com/WireCell/wire-cell-spack.git /spack/var/spack/repos/wirecell
RUN /spack/bin/spack repo add /spack/var/spack/repos/wirecell/spack_repo/wirecell
RUN /spack/bin/spack info wire-cell-toolkit
RUN /spack/bin/spack --version
"""


# Build dev env with "spng" branch of WCT.
[install_wct]
parent_kind = "wct_spack"
image = '{parent[image]}-wct-{version}'
label = '{parent[label]} WCT {version}'
package = "wire-cell-toolkit"
#version = ["master","porting","0.37.0"]
version = "0.30.7"
# limit spack to an cpu architecture likely common to all users, potentially at a performance cost for some.
cpu_target = "x86_64"
spec = "{package}@{version} +hdf +torch +cuda cuda_arch=89"
containerfile = """
FROM {parent[image]}
RUN /spack/bin/spack install  --fail-fast --no-cache --show-log-on-error -j 10 {spec} target={cpu_target}

# extra packages needed for WCT tests, not captured yet in wire-cell-spack
RUN /spack/bin/spack install --fail-fast --no-cache --show-log-on-error -j 10 jq target={cpu_target}
RUN /spack/bin/spack install --fail-fast --no-cache --show-log-on-error -j 10 graphviz+pangocairo target={cpu_target}

RUN /spack/bin/spack clean --downloads --failures --stage
"""


# SPNG is on a branch of wire-cell-toolkit as of 2025-08-11.  It is not yet
# included in official releases.  We could add specific hashes or make some
# SPNG-specific tags and use Spack to build that.  For this kind, we instead
# install a developer environment based on a view.
[spng_spackdev]
parent_kind = "install_wct"
image = '{parent[image]}-spng-dev'
label = '{parent[label]} spng dev'
package = "wire-cell-toolkit"

containerfile = """
FROM {parent[image]}

# The view
RUN /spack/bin/spack view -e {package} add -i /winch/local {package}
RUN for pkg in jq graphviz ; do /spack/bin/spack view add -i /winch/local $pkg; done

RUN uv pip install --system --break-system-packages snakemake

# hook in the view
ENV PREFIX /winch/local
ENV PATH /winch/local/bin:/winch/toolkit/test/bats/bin:/bin:/usr/bin:/usr/local/bin:/root/.local/bin
ENV LD_LIBRARY_PATH /winch/local/lib
ENV PKG_CONFIG_PATH /winch/local/share/pkgconfig:/winch/local/lib/pkgconfig:/winch/local/lib64/pkgconfig
ENV WIRECELL_PATH /winch/toolkit/cfg:/winch/local/share/wirecell
ENV BATS_LIB_PATH /winch/toolkit/test
# warning: python version hard-wired

## Store Torch base install directory.  This has the Python version encoded so
## we can not easily hard-wire it as an ENV.
RUN python -c 'import torch; print(torch.__path__[0]);' > /winch/torch-basedir

# wire-cell-python
RUN git clone --single-branch https://github.com/WireCell/wire-cell-python.git /winch/python
WORKDIR /winch/python

RUN which python
RUN python --version
RUN python -m pip install -r requirements/base.txt
RUN python -m pip install -r requirements/sigproc.txt
RUN python setup.py install
RUN wcpy --help


# wire-cell-toolkit.
# 
# WARNING: rerunning an image build after the spng branch gets new commits will
# tend to NOT rerun this line.
RUN git clone --branch spng --single-branch \
    https://github.com/WireCell/wire-cell-toolkit.git /winch/toolkit

WORKDIR /winch/toolkit


# fixme: must we hard-code the subpath to Spack's cuda?  It will break on different arch/os.
RUN ./wcb configure --prefix=$PREFIX \
    --boost-mt --boost-libs=$PREFIX/lib --boost-include=$PREFIX/include \
    --with-jsonnet-libs=gojsonnet --with-jsonnet=$PREFIX \
    --with-eigen-include=$PREFIX/include/eigen3 \
    --with-cuda=$PREFIX/targets/x86_64-linux \
    --with-libtorch-lib=$(cat /winch/torch-basedir)/lib \
    --with-libtorch-include=$(cat /winch/torch-basedir)/include,$(cat /winch/torch-basedir)/include/torch/csrc/api/include \
    --with-root=no --with-zio=no --with-zmq=no --with-czmq=no --with-zyre=no \
    || cat /winch/toolkit/build/config.log
RUN ./wcb 
RUN ./wcb install

RUN ./wcb distclean

# clear any parent
ENTRYPOINT []
# default command
CMD ["/bin/bash"]
"""


## Fine tuning for spng "campaign 0" image.  This is like spng_spackdev.
[campaign0]
parent_kind = "install_wct"
image = '{parent[image]}-campaign0'
label = '{parent[label]} campaign 0'
package = "wire-cell-toolkit"

containerfile = """
FROM {parent[image]}

# The view
RUN /spack/bin/spack view -e {package} add -i /winch/local {package}
RUN for pkg in jq graphviz ; do /spack/bin/spack view add -i /winch/local $pkg; done

RUN uv pip install --system --break-system-packages snakemake

# hook in the view
ENV PREFIX /winch/local
ENV PATH /winch/local/bin:/winch/toolkit/test/bats/bin:/bin:/usr/bin:/usr/local/bin:/root/.local/bin
ENV LD_LIBRARY_PATH /winch/local/lib
ENV PKG_CONFIG_PATH /winch/local/share/pkgconfig:/winch/local/lib/pkgconfig:/winch/local/lib64/pkgconfig
ENV WIRECELL_PATH /winch/toolkit/cfg:/winch/local/share/wirecell
ENV BATS_LIB_PATH /winch/toolkit/test
# warning: python version hard-wired

## Store Torch base install directory.  This has the Python version encoded so
## we can not easily hard-wire it as an ENV.
RUN python -c 'import torch; print(torch.__path__[0]);' > /winch/torch-basedir

# wire-cell-python
RUN git clone --single-branch https://github.com/WireCell/wire-cell-python.git /winch/python
WORKDIR /winch/python

RUN which python
RUN python --version
RUN python -m pip install -r requirements/base.txt
RUN python -m pip install -r requirements/sigproc.txt
RUN python setup.py install
RUN wcpy --help


# wire-cell-toolkit 
#
# This command does clone+checkout in one line with specific commit hash
# to assure winch rebuilds the image when the hash changes.  Eventually,
# replace hash with a tag.
#
# To get a hash, eg visit:
# https://github.com/WireCell/wire-cell-toolkit/tree/spng
RUN git clone --branch spng --single-branch \
    https://github.com/WireCell/wire-cell-toolkit.git /winch/toolkit && \
    cd /winch/toolkit && \
    git reset --hard ac442f8f500c470abd3fe0d45aae475658528555

WORKDIR /winch/toolkit

RUN ./wcb configure --prefix=$PREFIX \
    --boost-mt --boost-libs=$PREFIX/lib --boost-include=$PREFIX/include \
    --with-jsonnet-libs=gojsonnet --with-jsonnet=$PREFIX \
    --with-eigen-include=$PREFIX/include/eigen3 \
    --with-cuda=$PREFIX/targets/x86_64-linux \
    --with-libtorch-lib=$(cat /winch/torch-basedir)/lib \
    --with-libtorch-include=$(cat /winch/torch-basedir)/include,$(cat /winch/torch-basedir)/include/torch/csrc/api/include \
    --with-root=no --with-zio=no --with-zmq=no --with-czmq=no --with-zyre=no \
    || cat /winch/toolkit/build/config.log
RUN ./wcb 
RUN ./wcb install

RUN ./wcb distclean

RUN wget --quiet -O /winch/local/share/wirecell/unet-l23-cosmic500-e50.ts \
 https://huggingface.co/WireCell/dnn-roi/resolve/main/pdsp/ts-model-2.3/unet-l23-cosmic500-e50.ts

## You may wish to mount a data volume to /data and campaign0 will then find input files relative to that mount.
ENV WIRECELL_PATH /winch/toolkit/cfg:/winch/local/share/wirecell:/data

# clear any parent
ENTRYPOINT []
# default command
CMD ["/bin/bash"]

"""




# Add a final user layer to assist in setting up a non-root environment, while
# still preserving the ability to run as root.  User suggested to create a
# volume to hold user files.  See doc/spng.org.
[user]
parent_kind = ["spng_spackdev", "spng_debdev"]
image = '{parent[image]}-user'
label = '{parent[label]} user'

containerfile = """
FROM {parent[image]}

# can set these with --build-arg during building
ARG DEV_USER=devuser
ARG DEV_UID=1000
ARG DEV_GID=1000
ARG DEV_SHELL=fish

ENV PATH /home/${DEV_USER}/.local/bin:/winch/local/bin:/winch/toolkit/test/bats/bin:/bin:/usr/bin:/usr/local/bin:/root/.local/bin

# FIXME: move up into debian_minimal before next full rebuild
RUN apt-get install -y ${DEV_SHELL} sudo openssh-server openssh-client && apt-get clean


RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config && \
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config && \
    sed -i 's/#UsePAM yes/UsePAM no/' /etc/ssh/sshd_config && \
    sed -i 's/#LogLevel INFO/LogLevel INFO/' /etc/ssh/sshd_config
# bump from INFO to DEBUG if needed.



RUN mkdir -p /run/sshd

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh
RUN cat /usr/local/bin/entrypoint.sh


RUN /sbin/groupadd -g ${DEV_GID} ${DEV_USER} && \
    /sbin/useradd -m -u ${DEV_UID} -g ${DEV_GID} -s /usr/bin/${DEV_SHELL} ${DEV_USER}

RUN echo "${DEV_USER} ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/${DEV_USER} && \
    chmod 0440 /etc/sudoers.d/${DEV_USER}

EXPOSE 22

### witch to normal user

USER ${DEV_USER}
WORKDIR /home/${DEV_USER}

# Note, this gets shadowed if using a volume for $HOME, make it yourself when
# you first visit a container with a "podman exec".  In any case, you need to
# add your SSH public keys to ~/.ssh/authorized_keys to make use of SSH access.
RUN mkdir -p .ssh && chmod 700 .ssh

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# default command to keep container alive
# CMD ["tail", "-f", "/dev/null"]
CMD ["/usr/sbin/sshd", "-D"]

"""
files = { "entrypoint.sh" = """
#!/bin/bash
set -e
if [ "$1" = "/usr/sbin/sshd" ]; then
  # Ensure host keys exist; ssh-keygen will create if missing.
  # Do this here, not in a RUN so each container is unique.
  sudo /usr/bin/ssh-keygen -A
  # Run sshd in foreground (Docker/Podman best practice for main container process)
  exec sudo /usr/sbin/sshd -D -e
else
  # Otherwise, execute the command passed to the container as the devuser
  # This is crucial for podman exec, as it will run your shell/command as devuser
  exec "$@"
fi
"""}








############ snippets below ##############

# RUN apt-get update && apt-get install -y wget && apt-get clean
# RUN wget -q https://github.com/astral-sh/uv/releases/download/0.8.8/uv-x86_64-unknown-linux-gnu.tar.gz \
#     && tar xf uv-x86_64-unknown-linux-gnu.tar.gz \
#     && cp uv-x86_64-unknown-linux-gnu/uv* /usr/local/bin
# RUN uv tool install --with torch git+https://github.com/wirecell/wire-cell-python


# COPY dot.envrc winch/.envrc
# RUN cd /winch && direnv allow


# files = { "dot.envrc" = """
# load_prefix "$PWD/local"
# layout python
# export PREFIX="$PWD/local"
# path_add PKG_CONFIG_PATH "$PREFIX/share/pkgconfig"
# path_add PKG_CONFIG_PATH "$PREFIX/lib/pkgconfig"
# path_add PKG_CONFIG_PATH "$PREFIX/lib64/pkgconfig"


# ### Added by wcwc task wct-dev-view 
# # cfg from source and data from view
# path_add WIRECELL_PATH $PWD/toolkit/cfg
# path_add WIRECELL_PATH $PWD/local/share/wirecell

# # find wct-bats.sh library in source 
# export BATS_LIB_PATH=$PWD/toolkit/test

# PATH_add $PWD/toolkit/test/bats/bin


# # Find python modules
# export PYTHONPATH=$PWD/python
# """}


# [wctdev]
# parent_kind = "spackview"
# image = '{parent[image]}-wctdev-{gitref}'
# label = '{parent[label]} WCT dev'
# ## note: pushing fresh commits to a branch may require --force to rebuild the layer
# #gitref = ["master","apply-pointcloud"]
# # Note: 0.27.x will fail on recent SPDLOG 
# gitref = ["master", "0.29.x", "0.28.x"]

# containerfile = """
# FROM {parent[image]}


# RUN git clone https://github.com/WireCell/wire-cell-python.git /winch/python


# WORKDIR /winch/python

# RUN python --version
# RUN python -m pip install -r requirements/base.txt
# RUN python -m pip install -r requirements/sigproc.txt
# RUN python setup.py install
# RUN echo "PREFIX is $PREFIX"
# RUN echo "PATH is $PATH"

# RUN git clone --branch {gitref} --single-branch https://github.com/WireCell/wire-cell-toolkit.git /winch/toolkit

# WORKDIR /winch/toolkit
# ENV PYTHONPATH /winch/python
# ENV LIBRARY_PATH /winch/local/lib

# RUN ./wcb configure --prefix=$PREFIX --boost-mt --boost-libs=$PREFIX/lib --boost-include=$PREFIX/include --with-jsonnet-libs=gojsonnet --with-jsonnet=$PREFIX --with-root=$PREFIX || cat /winch/toolkit/build/config.log
# RUN ./wcb 
# RUN ./wcb install

# # run wcdoctests explicitly to let their failures terminate the build
# RUN for cmd in $(find ./build -regex '.*/wcdoctest-[a-z]*$') ; do $cmd; done

# RUN cd /winch/toolkit && ./wcb --tests
# """


# [wctdevdr]
# parent_kind = "wctdev"
# image = '{parent[image]}-datarepo'

# containerfile = """
# FROM {parent[image]}
# RUN ls -l /winch/toolkit/build/tests/history
# RUN ls -l /winch/toolkit/build/tests/history/$(git describe --tags)
# RUN cd /winch/toolkit && tar -C build/tests -cf history-$(git describe --tags).tar history/$(git describe --tags)
# RUN tar -tvf /winch/toolkit/history-$(git describe --tags).tar
# RUN ls -l /winch/toolkit/history-$(git describe --tags).tar
# """
